#!/bin/bash

if [ "$#" -ne 1 ]; then
    echo "Использование: $0 <путь_к_files.log>"
    exit 1
fi

log_file="$1"

if [ ! -f "$log_file" ]; then
    echo "Ошибка: файл $log_file не существует"
    exit 1
fi

# Инициализация переменных
total_entries=0
unique_files=0
hash_changes=0

declare -A file_hashes  # Ассоциативный массив для хранения последних хешей файлов
declare -A file_counts  # Для подсчета уникальных файлов

# Чтение лог-файла построчно
while IFS= read -r line; do
    # Парсинг строки лога
    file_path=$(echo "$line" | awk -F ' - ' '{print $1}')
    file_size=$(echo "$line" | awk -F ' - ' '{print $2}')
    timestamp=$(echo "$line" | awk -F ' - ' '{print $3}')
    current_hash=$(echo "$line" | awk -F ' - ' '{print $4}')
    algorithm=$(echo "$line" | awk -F ' - ' '{print $5}')

    ((total_entries++))

    # Подсчет уникальных файлов
    if [ -z "${file_counts[$file_path]}" ]; then
        ((unique_files++))
        file_counts[$file_path]=1
    fi

    # Проверка изменения хеша
    if [ -n "${file_hashes[$file_path]}" ]; then
        if [ "${file_hashes[$file_path]}" != "$current_hash" ]; then
            ((hash_changes++))
        fi
    fi

    # Сохраняем текущий хеш файла
    file_hashes["$file_path"]=$current_hash

done < "$log_file"

# Вывод результатов
echo "$total_entries $unique_files $hash_changes"
Как использовать:
Сохраните этот код в файл analyze_log.sh

Дайте ему права на выполнение: chmod +x analyze_log.sh

Запускайте с одним аргументом - путем к лог-файлу:

bash
./analyze_log.sh src/files.log
Что выводит скрипт:
Три числа через пробел:

Общее количество записей в логе

Количество уникальных файлов (по путям)

Количество изменений, которые привели к изменению хеша файла

Как это работает:
Скрипт читает лог-файл построчно

Для каждой строки:

Извлекает путь к файлу, хеш и другую информацию

Увеличивает счетчик общего количества записей

Проверяет, встречался ли этот файл раньше (для подсчета уникальных файлов)

Сравнивает текущий хеш с предыдущим (если был) для этого файла

В конце выводит собранную статистику

Особенности:
Использует ассоциативные массивы bash для отслеживания состояния файлов

Корректно обрабатывает файлы с пробелами в именах (благодаря разделитею " - ")

Не зависит от конкретного алгоритма хеширования (SHA256, SHA1 и т.д.)
