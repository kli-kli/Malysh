#!/bin/bash

# Проверяем, что передано 3 аргумента
if [ "$#" -ne 3 ]; then
    echo "Использование: $0 <путь_к_файлу> <строка_для_замены> <замена>"
    exit 1
fi

file_path="$1"
search="$2"
replace="$3"
log_file="src/files.log"

# Проверяем существование файла
if [ ! -f "$file_path" ]; then
    echo "Ошибка: файл $file_path не существует"
    exit 1
fi

# Проверяем, доступен ли файл для записи
if [ ! -w "$file_path" ]; then
    echo "Ошибка: нет прав на запись в файл $file_path"
    exit 1
fi

# Получаем информацию о файле до изменения
size_before=$(stat -c%s "$file_path")
sha_before=$(sha256sum "$file_path" | awk '{print $1}')
algorithm="SHA256"

# Выполняем замену с помощью sed
temp_file=$(mktemp)
sed "s/$search/$replace/g" "$file_path" > "$temp_file"
mv "$temp_file" "$file_path"

# Получаем информацию о файле после изменения
size_after=$(stat -c%s "$file_path")
sha_after=$(sha256sum "$file_path" | awk '{print $1}')
timestamp=$(date "+%Y-%m-%d %H:%M:%S")

# Записываем в лог
echo "$file_path - $size_after bytes - $timestamp - $sha_after - $algorithm" >> "$log_file"

echo "Замена выполнена успешно. Изменения записаны в лог."
Как использовать:
Сохраните этот код в файл src/edit.sh

Дайте ему права на выполнение: chmod +x src/edit.sh

Запускайте с тремя аргументами:

bash
./src/edit.sh путь/к/файлу "старая строка" "новая строка"
Особенности скрипта:
Проверяет наличие файла и права на запись

Использует sed для замены всех вхождений подстроки

Логирует в src/files.log следующую информацию:

Путь к файлу

Размер файла в байтах после изменения

Дату и время изменения

SHA256 сумму файла после изменения

Используемый алгоритм хеширования (SHA256)

Примечания:
Если вам нужен другой алгоритм хеширования (например, SHA1), замените sha256sum на соответствующий (например, sha1sum) и обновите переменную algorithm.

Скрипт заменяет все вхождения подстроки в файле. Если нужно заменить только первое вхождение, измените команду sed на sed "0,/$search/s//$replace/".
